name: Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: registry.digitalocean.com/workpace-containers
      VERSION: ${{ github.sha }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      SSL_CERTIFICATE_ID: ${{ secrets.SSL_CERTIFICATE_ID }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
      NEXT_PUBLIC_DISABLE_RBAC: ${{ secrets.NEXT_PUBLIC_DISABLE_RBAC }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Digital Ocean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/workpace-app:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/workpace-app:latest

      - name: Cleanup old Docker images
        run: |
          echo "Cleaning up old Docker images, keeping 3 most recent..."
          echo "Current build SHA: ${{ github.sha }}"

          # Get all tags except 'latest' and current build, sorted by date (newest first)
          ALL_TAGS=$(doctl registry repository list-tags workpace-app --format Tag,UpdatedAt --no-header | grep -v "^latest" | grep -v "^${{ github.sha }}" | grep -v "^$" | sort -k2 -r | awk '{print $1}')

          # Count total tags (excluding current build)
          TOTAL=$(echo "$ALL_TAGS" | wc -l | tr -d ' ')
          echo "Total image tags (excluding 'latest' and current build): $TOTAL"

          # Keep only 3 most recent, delete the rest
          if [ "$TOTAL" -gt 3 ]; then
            TAGS_TO_DELETE=$(echo "$ALL_TAGS" | tail -n +4)
            echo "Deleting old tags:"
            echo "$TAGS_TO_DELETE" | while read -r tag; do
              if [ -n "$tag" ]; then
                echo "  Deleting: $tag"
                doctl registry repository delete-tag workpace-app "$tag" --force
              fi
            done
            
            # Run garbage collection to free up storage
            echo "Running garbage collection..."
            doctl registry garbage-collection start --include-untagged-manifests --force
          else
            echo "Only $TOTAL tags found. No cleanup needed (keeping 3 most recent)."
          fi

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create or update Kubernetes secrets
        run: |
          # Create/update secrets from GitHub Secrets
          kubectl create secret generic workpace-secrets \
            --namespace=workpace \
            --from-literal=nextauth-secret="${{ secrets.NEXTAUTH_SECRET }}" \
            --from-literal=notion-api-key="${{ secrets.NOTION_API_KEY }}" \
            --from-literal=notion-default-db-id="${{ secrets.NOTION_DEFAULT_DB_ID }}" \
            --from-literal=openai-org-id="${{ secrets.OPENAI_ORG_ID }}" \
            --from-literal=openai-project-id="${{ secrets.OPENAI_PROJECT_ID }}" \
            --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=auth0-secret="${{ secrets.AUTH0_SECRET }}" \
            --from-literal=auth0-issuer-base-url="${{ secrets.AUTH0_ISSUER_BASE_URL }}" \
            --from-literal=auth0-client-id="${{ secrets.AUTH0_CLIENT_ID }}" \
            --from-literal=auth0-client-secret="${{ secrets.AUTH0_CLIENT_SECRET }}" \
            --from-literal=auth0-scope="${{ secrets.AUTH0_SCOPE }}" \
            --from-literal=auth0-audience="${{ secrets.AUTH0_AUDIENCE }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Update Kubernetes deployment
        run: |
          # Apply namespace if it doesn't exist
          kubectl apply -f k8s/namespace.yaml

          # Deploy using templates with environment variable substitution
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -f k8s/service.yaml

          # Deploy load balancer using template with SSL certificate
          envsubst < k8s/loadbalancer-template.yaml | kubectl apply -f -

          # Verify deployment
          kubectl rollout status deployment/workpace-app -n workpace
